{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Docstring-Markdown Docstring-Markdown is a fast and easy way to make beautiful documentation markdown files. Why Docstring-Markdown It's time to share your awesome new package with the world. And... get ready to spend the next week making your docs. Or, make beautiful docs with Docstring-Markdown in just a few lines of code. Installation $ pip install docstr-md Quickstart First, clone a test file from the Docstring-Markdown repo. $ curl https://raw.githubusercontent.com/dsbowen/docstr-md/master/test.py --output test.py The example test.py uses sklearn formatted docstrings. Let's convert it to markdown. from docstr_md.python import PySoup, compile_md from docstr_md.src_href import Github src_href = Github('https://github.com/dsbowen/docstr-md/blob/master') soup = PySoup(path='test.py', parser='sklearn', src_href=src_href) compile_md(soup, compiler='sklearn', outfile='test.md') You'll now have a test.md file in your current directory. This is what it looks like rendered. Citation @software{bowen2020docstr-md, author = {Dillon Bowen}, title = {Docstring-Markdown}, url = {https://dsbowen.github.io/docstr-md/}, date = {2020-05-15}, } License Users must cite Docstring-Markdown in any publications which use this software. Docstring-Markdown is licensed with the MIT License .","title":"Home"},{"location":"#docstring-markdown","text":"Docstring-Markdown is a fast and easy way to make beautiful documentation markdown files.","title":"Docstring-Markdown"},{"location":"#why-docstring-markdown","text":"It's time to share your awesome new package with the world. And... get ready to spend the next week making your docs. Or, make beautiful docs with Docstring-Markdown in just a few lines of code.","title":"Why Docstring-Markdown"},{"location":"#installation","text":"$ pip install docstr-md","title":"Installation"},{"location":"#quickstart","text":"First, clone a test file from the Docstring-Markdown repo. $ curl https://raw.githubusercontent.com/dsbowen/docstr-md/master/test.py --output test.py The example test.py uses sklearn formatted docstrings. Let's convert it to markdown. from docstr_md.python import PySoup, compile_md from docstr_md.src_href import Github src_href = Github('https://github.com/dsbowen/docstr-md/blob/master') soup = PySoup(path='test.py', parser='sklearn', src_href=src_href) compile_md(soup, compiler='sklearn', outfile='test.md') You'll now have a test.md file in your current directory. This is what it looks like rendered.","title":"Quickstart"},{"location":"#citation","text":"@software{bowen2020docstr-md, author = {Dillon Bowen}, title = {Docstring-Markdown}, url = {https://dsbowen.github.io/docstr-md/}, date = {2020-05-15}, }","title":"Citation"},{"location":"#license","text":"Users must cite Docstring-Markdown in any publications which use this software. Docstring-Markdown is licensed with the MIT License .","title":"License"},{"location":"contribute/","text":"Contribute to Docstring-Markdown Docstring-Markdown currently supports only Python files, expects sklearn-formated docstrings, and compiles markdown files to mimic sklearn's docs. Additionally, Docstring-Markdown only supports automatic source code links for code stored in Github repositories. I encourage users to contribute the following: Additional docstring parsers (e.g. for PyTorch or Keras formatted docstrings). Additional markdown compilers (e.g. for PyTorch or Keras style docs). Support for more languages. Additional source code href compilers (for projects hosted outside Github repositories).","title":"Contribute"},{"location":"contribute/#contribute-to-docstring-markdown","text":"Docstring-Markdown currently supports only Python files, expects sklearn-formated docstrings, and compiles markdown files to mimic sklearn's docs. Additionally, Docstring-Markdown only supports automatic source code links for code stored in Github repositories. I encourage users to contribute the following: Additional docstring parsers (e.g. for PyTorch or Keras formatted docstrings). Additional markdown compilers (e.g. for PyTorch or Keras style docs). Support for more languages. Additional source code href compilers (for projects hosted outside Github repositories).","title":"Contribute to Docstring-Markdown"},{"location":"src_href/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Linking to source code docstr_md.src_href.github. Github class docstr_md.src_href.github. Github ( root ) [source] Compiles a hyperlink for source code stored in a Github repository. Parameters: root : str Path to the root directory of the source code. e.g. 'https://github.com/<username>/blob/master' . Attributes: root : str Set from the root parameter. Examples from docstr_md.python import PySoup, compile_md from docstr_md.src_href import Github src_href = Github('https://github.com/my-username/my-package/blob/master') soup = PySoup(path='path/to/file.py', src_href=src_href) md = compile_md(soup) md is a string of compiled markdown with source code links in the class and function headers. Methods __call__ ( self, obj ) [source] Compile the hyperlink for the source code of the input object. Parameters: obj : docstr_md.soup_objects.FunctionDef or ClassDef Soup object to whose souce code we are linking. Returns: href : str Hyperlink of the form '<root>/<src_path>#L<lineno>' .","title":"Linking to source code"},{"location":"src_href/#linking-to-source-code","text":"","title":"Linking to source code"},{"location":"src_href/#docstr_mdsrc_hrefgithubgithub","text":"class docstr_md.src_href.github. Github ( root ) [source] Compiles a hyperlink for source code stored in a Github repository. Parameters: root : str Path to the root directory of the source code. e.g. 'https://github.com/<username>/blob/master' . Attributes: root : str Set from the root parameter.","title":"docstr_md.src_href.github.Github"},{"location":"src_href/#examples","text":"from docstr_md.python import PySoup, compile_md from docstr_md.src_href import Github src_href = Github('https://github.com/my-username/my-package/blob/master') soup = PySoup(path='path/to/file.py', src_href=src_href) md = compile_md(soup) md is a string of compiled markdown with source code links in the class and function headers.","title":"Examples"},{"location":"src_href/#methods","text":"__call__ ( self, obj ) [source] Compile the hyperlink for the source code of the input object. Parameters: obj : docstr_md.soup_objects.FunctionDef or ClassDef Soup object to whose souce code we are linking. Returns: href : str Hyperlink of the form '<root>/<src_path>#L<lineno>' .","title":"Methods"},{"location":"test/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Test file test. my_func def test. my_func ( param0, param1=1.0 ) [source] This is my function. Parameters: param0 : str This is parameter 0. param1 : float, default=1.0 This is parameter 1. Returns: None : Examples my_func('hello', 'world') Out: hello world test. MyClass class test. MyClass ( param0, param1=None ) [source] This is my class. Parameters: param0 : str This is parameter 0. param1 : str or None, default=None This is parameter 1. Attributes: attr0 : str This is attribute 0. attr1 : str or None This is attribute 1. Notes This is a note. Examples x = MyClass('param0') x.print_greeting() Out: hello world Methods print_greeting ( self, name='world' ) [source] This method returns a greeting. Parameters: name : str This is the name of the person to greet. Returns: greeting : str Of the form 'hello, {name}!'.","title":"Test"},{"location":"test/#test-file","text":"","title":"Test file"},{"location":"test/#testmy_func","text":"def test. my_func ( param0, param1=1.0 ) [source] This is my function. Parameters: param0 : str This is parameter 0. param1 : float, default=1.0 This is parameter 1. Returns: None :","title":"test.my_func"},{"location":"test/#examples","text":"my_func('hello', 'world') Out: hello world","title":"Examples"},{"location":"test/#testmyclass","text":"class test. MyClass ( param0, param1=None ) [source] This is my class. Parameters: param0 : str This is parameter 0. param1 : str or None, default=None This is parameter 1. Attributes: attr0 : str This is attribute 0. attr1 : str or None This is attribute 1.","title":"test.MyClass"},{"location":"test/#notes","text":"This is a note.","title":"Notes"},{"location":"test/#examples_1","text":"x = MyClass('param0') x.print_greeting() Out: hello world","title":"Examples"},{"location":"test/#methods","text":"print_greeting ( self, name='world' ) [source] This method returns a greeting. Parameters: name : str This is the name of the person to greet. Returns: greeting : str Of the form 'hello, {name}!'.","title":"Methods"},{"location":"python/basic_use/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Basic Use docstr_md.python. PySoup class docstr_md.python. PySoup ( code=None, path='', parser='sklearn', src_href=None ) [source] PySoup parses raw Python code for easy conversion to markdown. Parameters: code : str, default=None Raw Python code. path : str, default='' Path to python file. One of code or path must be specified. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: objects : list List of soup objects; expressions ( Expr ), functions ( FunctionDef ), classes ( ClassDef ) or string. Strings are usually interpreted as raw markdown. parser : callable The input parser . import_path : str Import path for soup objects. Setting the import path for the soup automatically sets the import path for its objects . src_path : str Path to the file in the source code repository (e.g. Github). Setting the source code path for the soup automatically sets the source code path for its objects . src_href : callable The src_href takes a soup object ( FunctionDef or ClassDef ) and converts it to a link to the source code. Setting the src_href for the soup automatically sets the src_href attribute for its objects . Examples Create a python file with parseable docstrings . from docstr_md.python import PySoup # replace with the appropriate file path and docstring parser soup = PySoup(path='path/to/file.py', parser='sklearn') Methods convert_ast_object ( self, obj ) [source] Convert an ast object to a soup object. Parameters: obj : ast.Expr, ast.FunctionDef, or ast.ClassDef ast object to convert. Returns: soup_object : Expr, FunctionDef, or ClassDef Specified in docstr_md/python/soup_objects.py. rm_properties ( self ) [source] Remove methods with getter, setter, and deleter decorators from all ClassDef soup objects in the objects list. Examples Create a python file with a class with methods decorated with @property , @x.setter , or @x.deleter . from docstr_md.python import PySoup soup = PySoup(path='path/to/file.py', parser='sklearn') soup.rm_properties() The ClassDef soup objects' methods will no longer include properties. docstr_md.python. compile_md def docstr_md.python. compile_md ( soup, compiler='sklearn', outfile=None ) [source] Compile markdown from a PySoup object. Parameters: soup : PySoup Soup object to convert to markdown. compiler : callable or str, default='sklearn' If input as a string, it compiler is used as a key to look up a built-in compiler. The compiler takes the soup and returns a string in markdown format. outfile : str or None File to which to write the markdown. Returns: markdown : str Markdown formatted as output by the compiler . Examples Create a python file with parseable docstrings . from docstr_md.python import PySoup, compile_md # replace with the appropriate file path and parser soup = PySoup(path='path/to/file.py', parser='sklearn') # replace with your desired compiler and output file path compile_md(soup, compiler='sklearn', outfile='path/to/outfile.md') You can find the compiled markdown file in test.md .","title":"Basic use"},{"location":"python/basic_use/#basic-use","text":"","title":"Basic Use"},{"location":"python/basic_use/#docstr_mdpythonpysoup","text":"class docstr_md.python. PySoup ( code=None, path='', parser='sklearn', src_href=None ) [source] PySoup parses raw Python code for easy conversion to markdown. Parameters: code : str, default=None Raw Python code. path : str, default='' Path to python file. One of code or path must be specified. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: objects : list List of soup objects; expressions ( Expr ), functions ( FunctionDef ), classes ( ClassDef ) or string. Strings are usually interpreted as raw markdown. parser : callable The input parser . import_path : str Import path for soup objects. Setting the import path for the soup automatically sets the import path for its objects . src_path : str Path to the file in the source code repository (e.g. Github). Setting the source code path for the soup automatically sets the source code path for its objects . src_href : callable The src_href takes a soup object ( FunctionDef or ClassDef ) and converts it to a link to the source code. Setting the src_href for the soup automatically sets the src_href attribute for its objects .","title":"docstr_md.python.PySoup"},{"location":"python/basic_use/#examples","text":"Create a python file with parseable docstrings . from docstr_md.python import PySoup # replace with the appropriate file path and docstring parser soup = PySoup(path='path/to/file.py', parser='sklearn')","title":"Examples"},{"location":"python/basic_use/#methods","text":"convert_ast_object ( self, obj ) [source] Convert an ast object to a soup object. Parameters: obj : ast.Expr, ast.FunctionDef, or ast.ClassDef ast object to convert. Returns: soup_object : Expr, FunctionDef, or ClassDef Specified in docstr_md/python/soup_objects.py. rm_properties ( self ) [source] Remove methods with getter, setter, and deleter decorators from all ClassDef soup objects in the objects list. Examples Create a python file with a class with methods decorated with @property , @x.setter , or @x.deleter . from docstr_md.python import PySoup soup = PySoup(path='path/to/file.py', parser='sklearn') soup.rm_properties() The ClassDef soup objects' methods will no longer include properties.","title":"Methods"},{"location":"python/basic_use/#docstr_mdpythoncompile_md","text":"def docstr_md.python. compile_md ( soup, compiler='sklearn', outfile=None ) [source] Compile markdown from a PySoup object. Parameters: soup : PySoup Soup object to convert to markdown. compiler : callable or str, default='sklearn' If input as a string, it compiler is used as a key to look up a built-in compiler. The compiler takes the soup and returns a string in markdown format. outfile : str or None File to which to write the markdown. Returns: markdown : str Markdown formatted as output by the compiler .","title":"docstr_md.python.compile_md"},{"location":"python/basic_use/#examples_1","text":"Create a python file with parseable docstrings . from docstr_md.python import PySoup, compile_md # replace with the appropriate file path and parser soup = PySoup(path='path/to/file.py', parser='sklearn') # replace with your desired compiler and output file path compile_md(soup, compiler='sklearn', outfile='path/to/outfile.md') You can find the compiled markdown file in test.md .","title":"Examples"},{"location":"python/compilers/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Compilers docstr_md.python.compilers. Sklearn Compiles sklearn-style markdown. Examples from docstr_md.python import PySoup, compilers # replace with the appropriate file path and parser soup = PySoup(path='path/to/file.py', parser='sklearn') compiler = compilers.Sklearn() md = compiler(soup) md is a string of compiled markdown. Methods __call__ ( self, soup ) [source] Compile markdown from soup. Parameters: soup : docstr_md.python.PySoup Soup to be compiled into markdown. Returns: md : str Compiled markdown.","title":"Compilers"},{"location":"python/compilers/#compilers","text":"","title":"Compilers"},{"location":"python/compilers/#docstr_mdpythoncompilerssklearn","text":"Compiles sklearn-style markdown.","title":"docstr_md.python.compilers.Sklearn"},{"location":"python/compilers/#examples","text":"from docstr_md.python import PySoup, compilers # replace with the appropriate file path and parser soup = PySoup(path='path/to/file.py', parser='sklearn') compiler = compilers.Sklearn() md = compiler(soup) md is a string of compiled markdown.","title":"Examples"},{"location":"python/compilers/#methods","text":"__call__ ( self, soup ) [source] Compile markdown from soup. Parameters: soup : docstr_md.python.PySoup Soup to be compiled into markdown. Returns: md : str Compiled markdown.","title":"Methods"},{"location":"python/parsers/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Parsers docstr_md.python.parsers. Sklearn class docstr_md.python.parsers. Sklearn ( raw_sections=['Notes', 'Examples'] ) [source] Parses sklearn-style docstrings. Parameters: raw_sections : iterable of strings, default=['Notes','Examples'] List of section names whose content will be treated as raw markdown. Other sections are treated as fields. Attributes: raw_sections : iterable of strings From raw_sections parameter. Notes '\\' functions as an escape character when added to the beginning of a line. Whitespace to its left will be stripped. All text to its right will be treated as raw markdown. Examples from docstr_md.python import parsers docstr_txt = ''' Description. Field0 ------ item0 : short description Long description. item1 : short description Long description. Field1 ------ item0 : short description Long description Notes ----- Here is a note. Examples -------- Here is an example. ''' parser = parsers.Sklearn() parser(docstr_txt) Out: { 'description': 'Description.', 'sections': [ ('Notes', 'Here is a note.'), ('Examples', 'Here is an example.') ], 'fields': [ { 'name': 'Field0', 'items': [ { 'name': 'item0', 'short_desc': 'short description', 'long_desc': 'Long description.' }, { 'name': 'item1', 'short_desc': 'short description', 'long_desc': 'Long description.' } ] }, { 'name': 'Field1', 'items': [ { 'name': 'item0', 'short_desc': 'short description', 'long_desc': 'Long description' } ] } ] } Methods __call__ ( self, obj ) [source] Parses the docstring. Parameters: obj : str or docstr_md.python.soup_objects.Expr Raw docstring to be parsed. Returns: docstr : dict Parsed docstring dictionary. A dictionary contains a description (str), raw markdown sections (list), and fields (list). Each section is a (name, markdown) tuple. Each field contains a name (str) and items (list). Each item contains a name (str), a short description (usually the data type, str), and a long description (str).","title":"Parsers"},{"location":"python/parsers/#parsers","text":"","title":"Parsers"},{"location":"python/parsers/#docstr_mdpythonparserssklearn","text":"class docstr_md.python.parsers. Sklearn ( raw_sections=['Notes', 'Examples'] ) [source] Parses sklearn-style docstrings. Parameters: raw_sections : iterable of strings, default=['Notes','Examples'] List of section names whose content will be treated as raw markdown. Other sections are treated as fields. Attributes: raw_sections : iterable of strings From raw_sections parameter.","title":"docstr_md.python.parsers.Sklearn"},{"location":"python/parsers/#notes","text":"'\\' functions as an escape character when added to the beginning of a line. Whitespace to its left will be stripped. All text to its right will be treated as raw markdown.","title":"Notes"},{"location":"python/parsers/#examples","text":"from docstr_md.python import parsers docstr_txt = ''' Description. Field0 ------ item0 : short description Long description. item1 : short description Long description. Field1 ------ item0 : short description Long description Notes ----- Here is a note. Examples -------- Here is an example. ''' parser = parsers.Sklearn() parser(docstr_txt) Out: { 'description': 'Description.', 'sections': [ ('Notes', 'Here is a note.'), ('Examples', 'Here is an example.') ], 'fields': [ { 'name': 'Field0', 'items': [ { 'name': 'item0', 'short_desc': 'short description', 'long_desc': 'Long description.' }, { 'name': 'item1', 'short_desc': 'short description', 'long_desc': 'Long description.' } ] }, { 'name': 'Field1', 'items': [ { 'name': 'item0', 'short_desc': 'short description', 'long_desc': 'Long description' } ] } ] }","title":"Examples"},{"location":"python/parsers/#methods","text":"__call__ ( self, obj ) [source] Parses the docstring. Parameters: obj : str or docstr_md.python.soup_objects.Expr Raw docstring to be parsed. Returns: docstr : dict Parsed docstring dictionary. A dictionary contains a description (str), raw markdown sections (list), and fields (list). Each section is a (name, markdown) tuple. Each field contains a name (str) and items (list). Each item contains a name (str), a short description (usually the data type, str), and a long description (str).","title":"Methods"},{"location":"python/soup_objects/","text":"a.src-href { float: right; } p.attr { margin-top: 0.5em; margin-left: 1em; } p.func-header { background-color: gainsboro; border-radius: 0.1em; padding: 0.5em; padding-left: 1em; } table.field-table { border-radius: 0.1em } Soup objects This file defines soup objects. PySoup derives soup objects from their ast equivalents and stores them in its objects attribute. These are designed to be relatively easy to compile in a markdown file. docstr_md.python.soup_objects. Expr class docstr_md.python.soup_objects. Expr ( obj, parser='sklearn' ) [source] Stores an expression. Parameters: obj : ast.Expr Expression object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.Expr Original ast.Expr object from which this is derived. docstr : dict Parsed docstring dictionary, output by the parser . docstr_md.python.soup_objects. FunctionDef class docstr_md.python.soup_objects. FunctionDef ( obj, parser='sklearn' ) [source] Stores a function. Parameters: obj : ast.FunctionDef Function object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.FunctionDef Original ast.FunctionDef object from which this is derived. name : str Name of the function. docstr : dict Parsed docstring dictionary, output by the parser . import_path : str Python formatted import path, e.g. 'path.to.file.' . src_path : str Path to file in the source code. e.g. 'path/to/file.py' . src_href : callable Takes self and outputs a link to the this object in the source code repository. Methods is_property ( self ) [source] Indicates that this function is a getter, setter, or deleter. i.e. This function is a method of a class decorated with @property , @x.setter , or @x.deleter . docstr_md.python.soup_objects. ClassDef class docstr_md.python.soup_objects. ClassDef ( obj, parser='sklearn' ) [source] Stores a class. Parameters: obj : ast.ClassDef Class object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.ClassDef Original ast.ClassDef object from which this is derived. name : str Name of the class. docstr : dict Parsed docstring dictionary, output by the parser . import_path : str Python formatted import path, e.g. 'path.to.file.' . src_path : str Path to file in the source code. e.g. 'path/to/file.py' . src_href : callable Takes self and outputs a link to the this object in the source code repository. Setting the src_href for self automatically sets the src_href attributes for its methods . methods : list List of class methods as FunctionDef objects. init : docstr_md.python.soup_objects.FunctionDef Class constructor. Methods rm_properties ( self ) [source] Remove methods with getter, setter, and deleter decorators.","title":"Soup objects"},{"location":"python/soup_objects/#soup-objects","text":"This file defines soup objects. PySoup derives soup objects from their ast equivalents and stores them in its objects attribute. These are designed to be relatively easy to compile in a markdown file.","title":"Soup objects"},{"location":"python/soup_objects/#docstr_mdpythonsoup_objectsexpr","text":"class docstr_md.python.soup_objects. Expr ( obj, parser='sklearn' ) [source] Stores an expression. Parameters: obj : ast.Expr Expression object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.Expr Original ast.Expr object from which this is derived. docstr : dict Parsed docstring dictionary, output by the parser .","title":"docstr_md.python.soup_objects.Expr"},{"location":"python/soup_objects/#docstr_mdpythonsoup_objectsfunctiondef","text":"class docstr_md.python.soup_objects. FunctionDef ( obj, parser='sklearn' ) [source] Stores a function. Parameters: obj : ast.FunctionDef Function object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.FunctionDef Original ast.FunctionDef object from which this is derived. name : str Name of the function. docstr : dict Parsed docstring dictionary, output by the parser . import_path : str Python formatted import path, e.g. 'path.to.file.' . src_path : str Path to file in the source code. e.g. 'path/to/file.py' . src_href : callable Takes self and outputs a link to the this object in the source code repository.","title":"docstr_md.python.soup_objects.FunctionDef"},{"location":"python/soup_objects/#methods","text":"is_property ( self ) [source] Indicates that this function is a getter, setter, or deleter. i.e. This function is a method of a class decorated with @property , @x.setter , or @x.deleter .","title":"Methods"},{"location":"python/soup_objects/#docstr_mdpythonsoup_objectsclassdef","text":"class docstr_md.python.soup_objects. ClassDef ( obj, parser='sklearn' ) [source] Stores a class. Parameters: obj : ast.ClassDef Class object from which this is derived. parser : callable or str, default='sklearn' If input as a string, PySoup uses it as a key to look up a built-in parser. The parser takes a raw docstring and returns a docstr dictionary. Attributes: ast : ast.ClassDef Original ast.ClassDef object from which this is derived. name : str Name of the class. docstr : dict Parsed docstring dictionary, output by the parser . import_path : str Python formatted import path, e.g. 'path.to.file.' . src_path : str Path to file in the source code. e.g. 'path/to/file.py' . src_href : callable Takes self and outputs a link to the this object in the source code repository. Setting the src_href for self automatically sets the src_href attributes for its methods . methods : list List of class methods as FunctionDef objects. init : docstr_md.python.soup_objects.FunctionDef Class constructor.","title":"docstr_md.python.soup_objects.ClassDef"},{"location":"python/soup_objects/#methods_1","text":"rm_properties ( self ) [source] Remove methods with getter, setter, and deleter decorators.","title":"Methods"}]}